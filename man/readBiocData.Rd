% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods.R
\name{readBiocData}
\alias{readBiocData}
\title{Read any biological data to the BiocProject format}
\usage{
readBiocData(project, func = FALSE)
}
\arguments{
\item{project}{an object of class \code{\link[pepr]{Project}}}

\item{func}{a boolean or a name of the function to use. See Details for more information}
}
\value{
object of the class that is returned with the provided function or an empty \code{\link{BiocProject}} object if no function was provided
}
\description{
This function allows for reading of any biological data into the \code{\link{BiocProject}} format based on the metadata enclosed in the \code{\link[pepr]{Project}} object.
}
\details{
If the \code{func} parameter is set to \code{TRUE} then the function name that will be used to read the data in is taken from the config slot in \code{\link[pepr]{Project}} (specifically: \code{config(project)$bioconductor$parse_code}). \cr If the \code{func} is set to string then the function of this name will be used to read the data in.\cr If the \code{func} is set to \code{FALSE} then an \code{\link{BiocProject}} object with no data is created.

The \code{readBiocData} function will try to find the function in the environment or will source it from the file named as the \code{func} argument specifies (with the \code{.R} extension).
}
\examples{
\dontrun{
projectConfig = system.file(
"extdata",
"example_peps-master",
"example_BiocProject",
"project_config.yaml",
package = "BiocProject"
)
source(system.file(
"extdata",
"example_peps-master",
"example_BiocProject",
"parseEncodeRegions.R",
package = "BiocProject"
))
PEP = Project(projectConfig)
readBiocData(PEP,TRUE)
}
}
